[
    {
        "id": "e6fc873145b0a448",
        "type": "tab",
        "label": "loader",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9aa5b9070aee3f3e",
        "type": "function",
        "z": "e6fc873145b0a448",
        "name": "Prepare MongoDB Insert",
        "func": "// Extract the medication and amount from the input message\nvar medication = msg.payload.medication;\nvar amount = msg.payload.amount;\nvar level = msg.payload.level;\n\n//node.warn('Extracted Medication: ' + medication);\n//node.warn('Extracted Amount: ' + amount);\n//node.warn('Extracted Amount: ' + level);\n\n// Create a new document to insert into the MongoDB collection\nvar newDocument = {\n    Medication: medication,\n    Amount: amount,\n    Level: level\n};\n\nnode.warn('New Document: ' + JSON.stringify(newDocument));\n\n// Set the payload to the new document\nmsg.payload = newDocument;\n\n// Set the MongoDB operation\nmsg.operation = \"insert\";\nnode.warn('Operation: ' + msg.operation);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "fdd29b27467bf404",
                "6e611c535a045cfb"
            ]
        ]
    },
    {
        "id": "6e611c535a045cfb",
        "type": "mongodb-aleph-out",
        "z": "e6fc873145b0a448",
        "mongodb": "8efbd4578f8ecf11",
        "name": "Load Meds to MongoDB",
        "collection": "Medications",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "64dd9fdb495bb68a"
            ]
        ]
    },
    {
        "id": "64dd9fdb495bb68a",
        "type": "debug",
        "z": "e6fc873145b0a448",
        "name": "Load Confirmation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "fdd29b27467bf404",
        "type": "debug",
        "z": "e6fc873145b0a448",
        "name": "Loader Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 180,
        "wires": []
    },
    {
        "id": "d4ce18e4ddae81b5",
        "type": "ui_numeric",
        "z": "e6fc873145b0a448",
        "name": "Amount",
        "label": "Amount",
        "tooltip": "",
        "group": "d8b6d191.994608",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "amount",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "10",
        "step": 1,
        "className": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "43c651aeb5a1601a"
            ]
        ]
    },
    {
        "id": "78f9921f53c89a6f",
        "type": "ui_dropdown",
        "z": "e6fc873145b0a448",
        "name": "Medication Type",
        "label": "Medication Type",
        "tooltip": "",
        "place": "Select option",
        "group": "d8b6d191.994608",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Panadol",
                "value": "Panadol",
                "type": "str"
            },
            {
                "label": "Fentanyl",
                "value": "Fentanyl",
                "type": "str"
            },
            {
                "label": "Morphine",
                "value": "Morphine",
                "type": "str"
            },
            {
                "label": "OxyContin",
                "value": "OxyContin",
                "type": "str"
            },
            {
                "label": "Methadone",
                "value": "Methadone",
                "type": "str"
            },
            {
                "label": "Adderall",
                "value": "Adderall",
                "type": "str"
            },
            {
                "label": "Paracetamol",
                "value": "Paracetamol",
                "type": "str"
            },
            {
                "label": "Ibuprofen",
                "value": "Ibuprofen",
                "type": "str"
            },
            {
                "label": "Loratadine",
                "value": "Loratadine",
                "type": "str"
            },
            {
                "label": "Ranitidine",
                "value": "Ranitidine",
                "type": "str"
            },
            {
                "label": "Vitamin C",
                "value": "Vitamin C",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "medication",
        "topicType": "msg",
        "className": "",
        "x": 120,
        "y": 220,
        "wires": [
            [
                "43c651aeb5a1601a"
            ]
        ]
    },
    {
        "id": "43c651aeb5a1601a",
        "type": "function",
        "z": "e6fc873145b0a448",
        "name": "Store Input",
        "func": "if (typeof msg.payload === 'number' && Number.isInteger(msg.payload)) {\n    // If payload is an integer, set 'amount' to its value\n    flow.set('amount', msg.payload);;\n    node.warn(\"Amount received and stored in flow context\");\n} else if (typeof msg.payload === 'string') {\n    var medicationName = msg.payload; // Extract medication name from the string\n    flow.set('medication', medicationName);\n    node.warn(\"Medication received and stored in flow context: \" + medicationName);\n} else {\n    // Log if payload does not contain expected properties\n    node.warn(\"Payload does not contain 'amount' or 'medication'. Payload: \" + JSON.stringify(msg.payload));\n}\n\n// Retrieve both amount and medication from global context\nvar amount = flow.get('amount');\nvar medication = flow.get('medication');\n\nnode.warn(\"Retrieved amount from flow context: \" + amount);\nnode.warn(\"Retrieved medication from flow context: \" + medication);\n\n// Check if both values are available\nif (amount !== undefined && medication !== undefined) {\n    // Both values are available, build the object\n    msg.payload = {\n        amount: amount,\n        medication: medication\n    };\n    node.warn(\"Both values are available, proceeding with msg: \" + JSON.stringify(msg.payload));\n\n    // Optionally, you can decide not to clear the stored values if you need them later\n    // global.set('amount', undefined);\n    // global.set('medication', undefined);\n\n    return msg;\n} else {\n    // If either amount or medication is not yet received, wait for it\n    node.warn(\"Waiting for both values to be received.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "eee4bd6ac70542d2",
        "type": "ui_button",
        "z": "e6fc873145b0a448",
        "name": "Confirm",
        "group": "d8b6d191.994608",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Confirm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "c571ddb1a2d7cee9"
            ]
        ]
    },
    {
        "id": "c571ddb1a2d7cee9",
        "type": "function",
        "z": "e6fc873145b0a448",
        "name": "Build Object",
        "func": "\n\n\n\n\n\n\n\n\n\n\n\n\n// Retrieve both amount and medication from global context\nvar amount = flow.get('amount');\nvar medication = flow.get('medication');\n\n// Define the list of medications with their security clearances\nvar medicationsList = {\n    \"Fentanyl\": \"High\",\n    \"Morphine\": \"High\",\n    \"OxyContin\": \"High\",\n    \"Methadone\": \"High\",\n    \"Adderall\": \"High\",\n    \"Panadol\": \"Low\", // \n    \"Ibuprofen\": \"Low\",\n    \"Loratadine\": \"Low\",\n    \"Ranitidine\": \"Low\",\n    \"Vitamin C\": \"Low\"\n};\n\n// Debug messages to check if values are retrieved\nnode.warn(\"Retrieved amount from flow context: \" + amount);\nnode.warn(\"Retrieved medication from flow context: \" + medication);\n\n// Check if both fields are filled\nif (amount !== undefined && medication !== undefined) {\n    // Check if medication is in the medications list\n    if (medicationsList.hasOwnProperty(medication)) {\n        // Build the object with medication, amount, and level\n        var data = {\n            amount: amount,\n            medication: medication,\n            level: medicationsList[medication] // Add the 'level' field based on medication\n        };\n        // Send the object to the next node (debug node)\n        msg.payload = data;\n    } else {\n        // If medication is not in the list, construct an error object message\n        msg.payload = {\n            error: \"Medication not found in the list\"\n        };\n        node.warn(\"Medication not found in the list\");\n    }\n} else {\n    // If any field is missing, construct an error object message\n    msg.payload = {\n        error: \"Please fill in both fields\"\n    };\n    node.warn(\"undefined fields\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "9aa5b9070aee3f3e"
            ]
        ]
    },
    {
        "id": "8efbd4578f8ecf11",
        "type": "mongodb-aleph-config",
        "hostname": "Nodered:LQmpKU4C0DX9cVay@cluster0.1cnydcd.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "",
        "port": "27017",
        "db": "ASRS",
        "name": ""
    },
    {
        "id": "d8b6d191.994608",
        "type": "ui_group",
        "name": "load meds menu",
        "tab": "91da677bce3bf414",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "91da677bce3bf414",
        "type": "ui_tab",
        "name": "Pharmacist load meds",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
